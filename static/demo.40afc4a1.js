!function(){var t={5318:function(t){t.exports=function(t){return t&&t.__esModule?t:{default:t}},t.exports.__esModule=!0,t.exports.default=t.exports},5671:function(t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r={test:"qytest.netease.com",release:"qiyukf.netease.com",online:"qiyukf.com"},e={init:function(t,n,e){return(new Image).src="https://qiyukf.com/sdk/res/img/loading.gif?t="+(new Date).getTime()+"&k="+t,new Promise((function(o,i){t||i(new Error("appKey必填")),"[object Object]"!==Object.prototype.toString.call(n)&&i(new Error("参数类型错误,第二个参数应该是object"));var c=[];if(n)for(var u in n)console.log(u),c.push(u+"="+n[u]);var a,f=c.length?"?"+c.join("&"):"",s=document.getElementsByTagName("head")[0],p=document.createElement("script");function v(n,r){p.onerror=null,p.onload=null;var e="";clearTimeout(a),window.ysf?window.ysf("onready",(function(){o(window.ysf)})):("loaderror"===n||"onload"===n?(console.log(r),e="SDK_LOAD_ERROR"):e="SDK_LOADING_TIMEOUT",(new Image).src="https://qiyukf.com/sdk/res/img/loading.gif?t="+(new Date).getTime()+"&k="+t+"&error="+e,i(new Error(e)))}p.type="text/javascript",p.async=!0,p.timeout=3e4,p.src="https://"+r[e||"online"]+"/script/"+t+".js"+f,a=setTimeout((function(){return v("timeout")}),3e4),p.onerror=function(t){return v("loaderror",t)},p.onload=function(t){return v("onload",t)},s.appendChild(p)}))}};n.default=e},9662:function(t,n,r){var e=r(7854),o=r(614),i=r(6330),c=e.TypeError;t.exports=function(t){if(o(t))return t;throw c(i(t)+" is not a function")}},9483:function(t,n,r){var e=r(7854),o=r(4411),i=r(6330),c=e.TypeError;t.exports=function(t){if(o(t))return t;throw c(i(t)+" is not a constructor")}},6077:function(t,n,r){var e=r(7854),o=r(614),i=e.String,c=e.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw c("Can't set "+i(t)+" as a prototype")}},5787:function(t,n,r){var e=r(7854),o=r(7976),i=e.TypeError;t.exports=function(t,n){if(o(n,t))return t;throw i("Incorrect invocation")}},9670:function(t,n,r){var e=r(7854),o=r(111),i=e.String,c=e.TypeError;t.exports=function(t){if(o(t))return t;throw c(i(t)+" is not an object")}},1318:function(t,n,r){var e=r(5656),o=r(1400),i=r(6244),c=function(t){return function(n,r,c){var u,a=e(n),f=i(a),s=o(c,f);if(t&&r!=r){for(;f>s;)if((u=a[s++])!=u)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},206:function(t,n,r){var e=r(1702);t.exports=e([].slice)},7072:function(t,n,r){var e=r(5112)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[e]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i={};i[e]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},4326:function(t,n,r){var e=r(1702),o=e({}.toString),i=e("".slice);t.exports=function(t){return i(o(t),8,-1)}},648:function(t,n,r){var e=r(7854),o=r(1694),i=r(614),c=r(4326),u=r(5112)("toStringTag"),a=e.Object,f="Arguments"==c(function(){return arguments}());t.exports=o?c:function(t){var n,r,e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=a(t),u))?r:f?c(n):"Object"==(e=c(n))&&i(n.callee)?"Arguments":e}},9920:function(t,n,r){var e=r(2597),o=r(3887),i=r(1236),c=r(3070);t.exports=function(t,n,r){for(var u=o(n),a=c.f,f=i.f,s=0;s<u.length;s++){var p=u[s];e(t,p)||r&&e(r,p)||a(t,p,f(n,p))}}},8880:function(t,n,r){var e=r(9781),o=r(3070),i=r(9114);t.exports=e?function(t,n,r){return o.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},9114:function(t){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},9781:function(t,n,r){var e=r(7293);t.exports=!e((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(t,n,r){var e=r(7854),o=r(111),i=e.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},7871:function(t){t.exports="object"==typeof window},1528:function(t,n,r){var e=r(8113),o=r(7854);t.exports=/ipad|iphone|ipod/i.test(e)&&void 0!==o.Pebble},6833:function(t,n,r){var e=r(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(e)},5268:function(t,n,r){var e=r(4326),o=r(7854);t.exports="process"==e(o.process)},1036:function(t,n,r){var e=r(8113);t.exports=/web0s(?!.*chrome)/i.test(e)},8113:function(t,n,r){var e=r(5005);t.exports=e("navigator","userAgent")||""},7392:function(t,n,r){var e,o,i=r(7854),c=r(8113),u=i.process,a=i.Deno,f=u&&u.versions||a&&a.version,s=f&&f.v8;s&&(o=(e=s.split("."))[0]>0&&e[0]<4?1:+(e[0]+e[1])),!o&&c&&(!(e=c.match(/Edge\/(\d+)/))||e[1]>=74)&&(e=c.match(/Chrome\/(\d+)/))&&(o=+e[1]),t.exports=o},748:function(t){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(t,n,r){var e=r(7854),o=r(1236).f,i=r(8880),c=r(1320),u=r(3505),a=r(9920),f=r(4705);t.exports=function(t,n){var r,s,p,v,l,h=t.target,d=t.global,y=t.stat;if(r=d?e:y?e[h]||u(h,{}):(e[h]||{}).prototype)for(s in n){if(v=n[s],p=t.noTargetGet?(l=o(r,s))&&l.value:r[s],!f(d?s:h+(y?".":"#")+s,t.forced)&&void 0!==p){if(typeof v==typeof p)continue;a(v,p)}(t.sham||p&&p.sham)&&i(v,"sham",!0),c(r,s,v,t)}}},7293:function(t){t.exports=function(t){try{return!!t()}catch(t){return!0}}},2104:function(t){var n=Function.prototype,r=n.apply,e=n.bind,o=n.call;t.exports="object"==typeof Reflect&&Reflect.apply||(e?o.bind(r):function(){return o.apply(r,arguments)})},9974:function(t,n,r){var e=r(1702),o=r(9662),i=e(e.bind);t.exports=function(t,n){return o(t),void 0===n?t:i?i(t,n):function(){return t.apply(n,arguments)}}},6916:function(t){var n=Function.prototype.call;t.exports=n.bind?n.bind(n):function(){return n.apply(n,arguments)}},6530:function(t,n,r){var e=r(9781),o=r(2597),i=Function.prototype,c=e&&Object.getOwnPropertyDescriptor,u=o(i,"name"),a=u&&"something"===function(){}.name,f=u&&(!e||e&&c(i,"name").configurable);t.exports={EXISTS:u,PROPER:a,CONFIGURABLE:f}},1702:function(t){var n=Function.prototype,r=n.bind,e=n.call,o=r&&r.bind(e);t.exports=r?function(t){return t&&o(e,t)}:function(t){return t&&function(){return e.apply(t,arguments)}}},5005:function(t,n,r){var e=r(7854),o=r(614),i=function(t){return o(t)?t:void 0};t.exports=function(t,n){return arguments.length<2?i(e[t]):e[t]&&e[t][n]}},1246:function(t,n,r){var e=r(648),o=r(8173),i=r(7497),c=r(5112)("iterator");t.exports=function(t){if(null!=t)return o(t,c)||o(t,"@@iterator")||i[e(t)]}},8554:function(t,n,r){var e=r(7854),o=r(6916),i=r(9662),c=r(9670),u=r(6330),a=r(1246),f=e.TypeError;t.exports=function(t,n){var r=arguments.length<2?a(t):n;if(i(r))return c(o(r,t));throw f(u(t)+" is not iterable")}},8173:function(t,n,r){var e=r(9662);t.exports=function(t,n){var r=t[n];return null==r?void 0:e(r)}},7854:function(t,n,r){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:function(t,n,r){var e=r(1702),o=r(7908),i=e({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,n){return i(o(t),n)}},3501:function(t){t.exports={}},842:function(t,n,r){var e=r(7854);t.exports=function(t,n){var r=e.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,n))}},490:function(t,n,r){var e=r(5005);t.exports=e("document","documentElement")},4664:function(t,n,r){var e=r(9781),o=r(7293),i=r(317);t.exports=!e&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:function(t,n,r){var e=r(7854),o=r(1702),i=r(7293),c=r(4326),u=e.Object,a=o("".split);t.exports=i((function(){return!u("z").propertyIsEnumerable(0)}))?function(t){return"String"==c(t)?a(t,""):u(t)}:u},2788:function(t,n,r){var e=r(1702),o=r(614),i=r(5465),c=e(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return c(t)}),t.exports=i.inspectSource},9909:function(t,n,r){var e,o,i,c=r(8536),u=r(7854),a=r(1702),f=r(111),s=r(8880),p=r(2597),v=r(5465),l=r(6200),h=r(3501),d="Object already initialized",y=u.TypeError,m=u.WeakMap;if(c||v.state){var x=v.state||(v.state=new m),g=a(x.get),b=a(x.has),w=a(x.set);e=function(t,n){if(b(x,t))throw new y(d);return n.facade=t,w(x,t,n),n},o=function(t){return g(x,t)||{}},i=function(t){return b(x,t)}}else{var j=l("state");h[j]=!0,e=function(t,n){if(p(t,j))throw new y(d);return n.facade=t,s(t,j,n),n},o=function(t){return p(t,j)?t[j]:{}},i=function(t){return p(t,j)}}t.exports={set:e,get:o,has:i,enforce:function(t){return i(t)?o(t):e(t,{})},getterFor:function(t){return function(n){var r;if(!f(n)||(r=o(n)).type!==t)throw y("Incompatible receiver, "+t+" required");return r}}}},7659:function(t,n,r){var e=r(5112),o=r(7497),i=e("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},614:function(t){t.exports=function(t){return"function"==typeof t}},4411:function(t,n,r){var e=r(1702),o=r(7293),i=r(614),c=r(648),u=r(5005),a=r(2788),f=function(){},s=[],p=u("Reflect","construct"),v=/^\s*(?:class|function)\b/,l=e(v.exec),h=!v.exec(f),d=function(t){if(!i(t))return!1;try{return p(f,s,t),!0}catch(t){return!1}},y=function(t){if(!i(t))return!1;switch(c(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!l(v,a(t))}catch(t){return!0}};y.sham=!0,t.exports=!p||o((function(){var t;return d(d.call)||!d(Object)||!d((function(){t=!0}))||t}))?y:d},4705:function(t,n,r){var e=r(7293),o=r(614),i=/#|\.prototype\./,c=function(t,n){var r=a[u(t)];return r==s||r!=f&&(o(n)?e(n):!!n)},u=c.normalize=function(t){return String(t).replace(i,".").toLowerCase()},a=c.data={},f=c.NATIVE="N",s=c.POLYFILL="P";t.exports=c},111:function(t,n,r){var e=r(614);t.exports=function(t){return"object"==typeof t?null!==t:e(t)}},1913:function(t){t.exports=!1},2190:function(t,n,r){var e=r(7854),o=r(5005),i=r(614),c=r(7976),u=r(3307),a=e.Object;t.exports=u?function(t){return"symbol"==typeof t}:function(t){var n=o("Symbol");return i(n)&&c(n.prototype,a(t))}},408:function(t,n,r){var e=r(7854),o=r(9974),i=r(6916),c=r(9670),u=r(6330),a=r(7659),f=r(6244),s=r(7976),p=r(8554),v=r(1246),l=r(9212),h=e.TypeError,d=function(t,n){this.stopped=t,this.result=n},y=d.prototype;t.exports=function(t,n,r){var e,m,x,g,b,w,j,O=r&&r.that,S=!(!r||!r.AS_ENTRIES),E=!(!r||!r.IS_ITERATOR),T=!(!r||!r.INTERRUPTED),P=o(n,O),_=function(t){return e&&l(e,"normal",t),new d(!0,t)},I=function(t){return S?(c(t),T?P(t[0],t[1],_):P(t[0],t[1])):T?P(t,_):P(t)};if(E)e=t;else{if(!(m=v(t)))throw h(u(t)+" is not iterable");if(a(m)){for(x=0,g=f(t);g>x;x++)if((b=I(t[x]))&&s(y,b))return b;return new d(!1)}e=p(t,m)}for(w=e.next;!(j=i(w,e)).done;){try{b=I(j.value)}catch(t){l(e,"throw",t)}if("object"==typeof b&&b&&s(y,b))return b}return new d(!1)}},9212:function(t,n,r){var e=r(6916),o=r(9670),i=r(8173);t.exports=function(t,n,r){var c,u;o(t);try{if(!(c=i(t,"return"))){if("throw"===n)throw r;return r}c=e(c,t)}catch(t){u=!0,c=t}if("throw"===n)throw r;if(u)throw c;return o(c),r}},7497:function(t){t.exports={}},6244:function(t,n,r){var e=r(7466);t.exports=function(t){return e(t.length)}},5948:function(t,n,r){var e,o,i,c,u,a,f,s,p=r(7854),v=r(9974),l=r(1236).f,h=r(261).set,d=r(6833),y=r(1528),m=r(1036),x=r(5268),g=p.MutationObserver||p.WebKitMutationObserver,b=p.document,w=p.process,j=p.Promise,O=l(p,"queueMicrotask"),S=O&&O.value;S||(e=function(){var t,n;for(x&&(t=w.domain)&&t.exit();o;){n=o.fn,o=o.next;try{n()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},d||x||m||!g||!b?!y&&j&&j.resolve?((f=j.resolve(void 0)).constructor=j,s=v(f.then,f),c=function(){s(e)}):x?c=function(){w.nextTick(e)}:(h=v(h,p),c=function(){h(e)}):(u=!0,a=b.createTextNode(""),new g(e).observe(a,{characterData:!0}),c=function(){a.data=u=!u})),t.exports=S||function(t){var n={fn:t,next:void 0};i&&(i.next=n),o||(o=n,c()),i=n}},3366:function(t,n,r){var e=r(7854);t.exports=e.Promise},133:function(t,n,r){var e=r(7392),o=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&e&&e<41}))},8536:function(t,n,r){var e=r(7854),o=r(614),i=r(2788),c=e.WeakMap;t.exports=o(c)&&/native code/.test(i(c))},8523:function(t,n,r){"use strict";var e=r(9662),o=function(t){var n,r;this.promise=new t((function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e})),this.resolve=e(n),this.reject=e(r)};t.exports.f=function(t){return new o(t)}},3070:function(t,n,r){var e=r(7854),o=r(9781),i=r(4664),c=r(9670),u=r(4948),a=e.TypeError,f=Object.defineProperty;n.f=o?f:function(t,n,r){if(c(t),n=u(n),c(r),i)try{return f(t,n,r)}catch(t){}if("get"in r||"set"in r)throw a("Accessors not supported");return"value"in r&&(t[n]=r.value),t}},1236:function(t,n,r){var e=r(9781),o=r(6916),i=r(5296),c=r(9114),u=r(5656),a=r(4948),f=r(2597),s=r(4664),p=Object.getOwnPropertyDescriptor;n.f=e?p:function(t,n){if(t=u(t),n=a(n),s)try{return p(t,n)}catch(t){}if(f(t,n))return c(!o(i.f,t,n),t[n])}},8006:function(t,n,r){var e=r(6324),o=r(748).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},5181:function(t,n){n.f=Object.getOwnPropertySymbols},7976:function(t,n,r){var e=r(1702);t.exports=e({}.isPrototypeOf)},6324:function(t,n,r){var e=r(1702),o=r(2597),i=r(5656),c=r(1318).indexOf,u=r(3501),a=e([].push);t.exports=function(t,n){var r,e=i(t),f=0,s=[];for(r in e)!o(u,r)&&o(e,r)&&a(s,r);for(;n.length>f;)o(e,r=n[f++])&&(~c(s,r)||a(s,r));return s}},5296:function(t,n){"use strict";var r={}.propertyIsEnumerable,e=Object.getOwnPropertyDescriptor,o=e&&!r.call({1:2},1);n.f=o?function(t){var n=e(this,t);return!!n&&n.enumerable}:r},7674:function(t,n,r){var e=r(1702),o=r(9670),i=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,r={};try{(t=e(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),n=r instanceof Array}catch(t){}return function(r,e){return o(r),i(e),n?t(r,e):r.__proto__=e,r}}():void 0)},2140:function(t,n,r){var e=r(7854),o=r(6916),i=r(614),c=r(111),u=e.TypeError;t.exports=function(t,n){var r,e;if("string"===n&&i(r=t.toString)&&!c(e=o(r,t)))return e;if(i(r=t.valueOf)&&!c(e=o(r,t)))return e;if("string"!==n&&i(r=t.toString)&&!c(e=o(r,t)))return e;throw u("Can't convert object to primitive value")}},3887:function(t,n,r){var e=r(5005),o=r(1702),i=r(8006),c=r(5181),u=r(9670),a=o([].concat);t.exports=e("Reflect","ownKeys")||function(t){var n=i.f(u(t)),r=c.f;return r?a(n,r(t)):n}},2534:function(t){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:function(t,n,r){var e=r(9670),o=r(111),i=r(8523);t.exports=function(t,n){if(e(t),o(n)&&n.constructor===t)return n;var r=i.f(t);return(0,r.resolve)(n),r.promise}},8572:function(t){var n=function(){this.head=null,this.tail=null};n.prototype={add:function(t){var n={item:t,next:null};this.head?this.tail.next=n:this.head=n,this.tail=n},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=n},2248:function(t,n,r){var e=r(1320);t.exports=function(t,n,r){for(var o in n)e(t,o,n[o],r);return t}},1320:function(t,n,r){var e=r(7854),o=r(614),i=r(2597),c=r(8880),u=r(3505),a=r(2788),f=r(9909),s=r(6530).CONFIGURABLE,p=f.get,v=f.enforce,l=String(String).split("String");(t.exports=function(t,n,r,a){var f,p=!!a&&!!a.unsafe,h=!!a&&!!a.enumerable,d=!!a&&!!a.noTargetGet,y=a&&void 0!==a.name?a.name:n;o(r)&&("Symbol("===String(y).slice(0,7)&&(y="["+String(y).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||s&&r.name!==y)&&c(r,"name",y),(f=v(r)).source||(f.source=l.join("string"==typeof y?y:""))),t!==e?(p?!d&&t[n]&&(h=!0):delete t[n],h?t[n]=r:c(t,n,r)):h?t[n]=r:u(n,r)})(Function.prototype,"toString",(function(){return o(this)&&p(this).source||a(this)}))},4488:function(t,n,r){var e=r(7854).TypeError;t.exports=function(t){if(null==t)throw e("Can't call method on "+t);return t}},3505:function(t,n,r){var e=r(7854),o=Object.defineProperty;t.exports=function(t,n){try{o(e,t,{value:n,configurable:!0,writable:!0})}catch(r){e[t]=n}return n}},6340:function(t,n,r){"use strict";var e=r(5005),o=r(3070),i=r(5112),c=r(9781),u=i("species");t.exports=function(t){var n=e(t),r=o.f;c&&n&&!n[u]&&r(n,u,{configurable:!0,get:function(){return this}})}},8003:function(t,n,r){var e=r(3070).f,o=r(2597),i=r(5112)("toStringTag");t.exports=function(t,n,r){t&&!r&&(t=t.prototype),t&&!o(t,i)&&e(t,i,{configurable:!0,value:n})}},6200:function(t,n,r){var e=r(2309),o=r(9711),i=e("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:function(t,n,r){var e=r(7854),o=r(3505),i="__core-js_shared__",c=e[i]||o(i,{});t.exports=c},2309:function(t,n,r){var e=r(1913),o=r(5465);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.20.1",mode:e?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(t,n,r){var e=r(9670),o=r(9483),i=r(5112)("species");t.exports=function(t,n){var r,c=e(t).constructor;return void 0===c||null==(r=e(c)[i])?n:o(r)}},261:function(t,n,r){var e,o,i,c,u=r(7854),a=r(2104),f=r(9974),s=r(614),p=r(2597),v=r(7293),l=r(490),h=r(206),d=r(317),y=r(6833),m=r(5268),x=u.setImmediate,g=u.clearImmediate,b=u.process,w=u.Dispatch,j=u.Function,O=u.MessageChannel,S=u.String,E=0,T={};try{e=u.location}catch(t){}var P=function(t){if(p(T,t)){var n=T[t];delete T[t],n()}},_=function(t){return function(){P(t)}},I=function(t){P(t.data)},k=function(t){u.postMessage(S(t),e.protocol+"//"+e.host)};x&&g||(x=function(t){var n=h(arguments,1);return T[++E]=function(){a(s(t)?t:j(t),void 0,n)},o(E),E},g=function(t){delete T[t]},m?o=function(t){b.nextTick(_(t))}:w&&w.now?o=function(t){w.now(_(t))}:O&&!y?(c=(i=new O).port2,i.port1.onmessage=I,o=f(c.postMessage,c)):u.addEventListener&&s(u.postMessage)&&!u.importScripts&&e&&"file:"!==e.protocol&&!v(k)?(o=k,u.addEventListener("message",I,!1)):o="onreadystatechange"in d("script")?function(t){l.appendChild(d("script")).onreadystatechange=function(){l.removeChild(this),P(t)}}:function(t){setTimeout(_(t),0)}),t.exports={set:x,clear:g}},1400:function(t,n,r){var e=r(9303),o=Math.max,i=Math.min;t.exports=function(t,n){var r=e(t);return r<0?o(r+n,0):i(r,n)}},5656:function(t,n,r){var e=r(8361),o=r(4488);t.exports=function(t){return e(o(t))}},9303:function(t){var n=Math.ceil,r=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?r:n)(e)}},7466:function(t,n,r){var e=r(9303),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},7908:function(t,n,r){var e=r(7854),o=r(4488),i=e.Object;t.exports=function(t){return i(o(t))}},7593:function(t,n,r){var e=r(7854),o=r(6916),i=r(111),c=r(2190),u=r(8173),a=r(2140),f=r(5112),s=e.TypeError,p=f("toPrimitive");t.exports=function(t,n){if(!i(t)||c(t))return t;var r,e=u(t,p);if(e){if(void 0===n&&(n="default"),r=o(e,t,n),!i(r)||c(r))return r;throw s("Can't convert object to primitive value")}return void 0===n&&(n="number"),a(t,n)}},4948:function(t,n,r){var e=r(7593),o=r(2190);t.exports=function(t){var n=e(t,"string");return o(n)?n:n+""}},1694:function(t,n,r){var e={};e[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(e)},6330:function(t,n,r){var e=r(7854).String;t.exports=function(t){try{return e(t)}catch(t){return"Object"}}},9711:function(t,n,r){var e=r(1702),o=0,i=Math.random(),c=e(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+c(++o+i,36)}},3307:function(t,n,r){var e=r(133);t.exports=e&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:function(t,n,r){var e=r(7854),o=r(2309),i=r(2597),c=r(9711),u=r(133),a=r(3307),f=o("wks"),s=e.Symbol,p=s&&s.for,v=a?s:s&&s.withoutSetter||c;t.exports=function(t){if(!i(f,t)||!u&&"string"!=typeof f[t]){var n="Symbol."+t;u&&i(s,t)?f[t]=s[t]:f[t]=a&&p?p(n):v(n)}return f[t]}},8674:function(t,n,r){"use strict";var e,o,i,c,u=r(2109),a=r(1913),f=r(7854),s=r(5005),p=r(6916),v=r(3366),l=r(1320),h=r(2248),d=r(7674),y=r(8003),m=r(6340),x=r(9662),g=r(614),b=r(111),w=r(5787),j=r(2788),O=r(408),S=r(7072),E=r(6707),T=r(261).set,P=r(5948),_=r(9478),I=r(842),k=r(8523),M=r(2534),F=r(8572),R=r(9909),A=r(4705),D=r(5112),C=r(7871),L=r(5268),N=r(7392),q=D("species"),G="Promise",z=R.getterFor(G),U=R.set,K=R.getterFor(G),B=v&&v.prototype,W=v,H=B,V=f.TypeError,X=f.document,Y=f.process,$=k.f,J=$,Q=!!(X&&X.createEvent&&f.dispatchEvent),Z=g(f.PromiseRejectionEvent),tt="unhandledrejection",nt=!1,rt=A(G,(function(){var t=j(W),n=t!==String(W);if(!n&&66===N)return!0;if(a&&!H.finally)return!0;if(N>=51&&/native code/.test(t))return!1;var r=new W((function(t){t(1)})),e=function(t){t((function(){}),(function(){}))};return(r.constructor={})[q]=e,!(nt=r.then((function(){}))instanceof e)||!n&&C&&!Z})),et=rt||!S((function(t){W.all(t).catch((function(){}))})),ot=function(t){var n;return!(!b(t)||!g(n=t.then))&&n},it=function(t,n){var r,e,o,i=n.value,c=1==n.state,u=c?t.ok:t.fail,a=t.resolve,f=t.reject,s=t.domain;try{u?(c||(2===n.rejection&&st(n),n.rejection=1),!0===u?r=i:(s&&s.enter(),r=u(i),s&&(s.exit(),o=!0)),r===t.promise?f(V("Promise-chain cycle")):(e=ot(r))?p(e,r,a,f):a(r)):f(i)}catch(t){s&&!o&&s.exit(),f(t)}},ct=function(t,n){t.notified||(t.notified=!0,P((function(){for(var r,e=t.reactions;r=e.get();)it(r,t);t.notified=!1,n&&!t.rejection&&at(t)})))},ut=function(t,n,r){var e,o;Q?((e=X.createEvent("Event")).promise=n,e.reason=r,e.initEvent(t,!1,!0),f.dispatchEvent(e)):e={promise:n,reason:r},!Z&&(o=f["on"+t])?o(e):t===tt&&I("Unhandled promise rejection",r)},at=function(t){p(T,f,(function(){var n,r=t.facade,e=t.value;if(ft(t)&&(n=M((function(){L?Y.emit("unhandledRejection",e,r):ut(tt,r,e)})),t.rejection=L||ft(t)?2:1,n.error))throw n.value}))},ft=function(t){return 1!==t.rejection&&!t.parent},st=function(t){p(T,f,(function(){var n=t.facade;L?Y.emit("rejectionHandled",n):ut("rejectionhandled",n,t.value)}))},pt=function(t,n,r){return function(e){t(n,e,r)}},vt=function(t,n,r){t.done||(t.done=!0,r&&(t=r),t.value=n,t.state=2,ct(t,!0))},lt=function(t,n,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===n)throw V("Promise can't be resolved itself");var e=ot(n);e?P((function(){var r={done:!1};try{p(e,n,pt(lt,r,t),pt(vt,r,t))}catch(n){vt(r,n,t)}})):(t.value=n,t.state=1,ct(t,!1))}catch(n){vt({done:!1},n,t)}}};if(rt&&(H=(W=function(t){w(this,H),x(t),p(e,this);var n=z(this);try{t(pt(lt,n),pt(vt,n))}catch(t){vt(n,t)}}).prototype,(e=function(t){U(this,{type:G,done:!1,notified:!1,parent:!1,reactions:new F,rejection:!1,state:0,value:void 0})}).prototype=h(H,{then:function(t,n){var r=K(this),e=$(E(this,W));return r.parent=!0,e.ok=!g(t)||t,e.fail=g(n)&&n,e.domain=L?Y.domain:void 0,0==r.state?r.reactions.add(e):P((function(){it(e,r)})),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e,n=z(t);this.promise=t,this.resolve=pt(lt,n),this.reject=pt(vt,n)},k.f=$=function(t){return t===W||t===i?new o(t):J(t)},!a&&g(v)&&B!==Object.prototype)){c=B.then,nt||(l(B,"then",(function(t,n){var r=this;return new W((function(t,n){p(c,r,t,n)})).then(t,n)}),{unsafe:!0}),l(B,"catch",H.catch,{unsafe:!0}));try{delete B.constructor}catch(t){}d&&d(B,H)}u({global:!0,wrap:!0,forced:rt},{Promise:W}),y(W,G,!1,!0),m(G),i=s(G),u({target:G,stat:!0,forced:rt},{reject:function(t){var n=$(this);return p(n.reject,void 0,t),n.promise}}),u({target:G,stat:!0,forced:a||rt},{resolve:function(t){return _(a&&this===i?W:this,t)}}),u({target:G,stat:!0,forced:et},{all:function(t){var n=this,r=$(n),e=r.resolve,o=r.reject,i=M((function(){var r=x(n.resolve),i=[],c=0,u=1;O(t,(function(t){var a=c++,f=!1;u++,p(r,n,t).then((function(t){f||(f=!0,i[a]=t,--u||e(i))}),o)})),--u||e(i)}));return i.error&&o(i.value),r.promise},race:function(t){var n=this,r=$(n),e=r.reject,o=M((function(){var o=x(n.resolve);O(t,(function(t){p(o,n,t).then(r.resolve,e)}))}));return o.error&&e(o.value),r.promise}})}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),function(){"use strict";var t=r(5318)(r(5671));r(8674),t.default.init("f13509f5e8b8e1fbb388b3ddbee238c2",{templateId:123,shuntId:11},"test").then((function(t){t("open")})).catch((function(t){console.log("sdk加载失败---",t)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,